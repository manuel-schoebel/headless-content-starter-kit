### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  nei: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type Breadcrumb {
  current: Boolean
  href: String
  label: String
}

type ComponentContentButtonBar {
  align: ENUM_COMPONENTCONTENTBUTTONBAR_ALIGN
  buttons(filters: ComponentElementsButtonFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentElementsButton]
  id: ID!
}

input ComponentContentButtonBarFiltersInput {
  align: StringFilterInput
  and: [ComponentContentButtonBarFiltersInput]
  buttons: ComponentElementsButtonFiltersInput
  not: ComponentContentButtonBarFiltersInput
  or: [ComponentContentButtonBarFiltersInput]
}

input ComponentContentButtonBarInput {
  align: ENUM_COMPONENTCONTENTBUTTONBAR_ALIGN
  buttons: [ComponentElementsButtonInput]
  id: ID
}

type ComponentContentClientQuote {
  avatar: UploadFileEntityResponse
  companyName: String
  id: ID!
  name: String
  position: String
  text: String
}

input ComponentContentClientQuoteFiltersInput {
  and: [ComponentContentClientQuoteFiltersInput]
  companyName: StringFilterInput
  name: StringFilterInput
  not: ComponentContentClientQuoteFiltersInput
  or: [ComponentContentClientQuoteFiltersInput]
  position: StringFilterInput
  text: StringFilterInput
}

input ComponentContentClientQuoteInput {
  avatar: ID
  companyName: String
  id: ID
  name: String
  position: String
  text: String
}

type ComponentContentCode {
  code: String
  html: String
  id: ID!
}

input ComponentContentCodeFiltersInput {
  and: [ComponentContentCodeFiltersInput]
  code: StringFilterInput
  not: ComponentContentCodeFiltersInput
  or: [ComponentContentCodeFiltersInput]
}

input ComponentContentCodeInput {
  code: String
  id: ID
}

type ComponentContentFaq {
  faq: FaqEntityResponse
  id: ID!
}

input ComponentContentFaqFiltersInput {
  and: [ComponentContentFaqFiltersInput]
  faq: FaqFiltersInput
  not: ComponentContentFaqFiltersInput
  or: [ComponentContentFaqFiltersInput]
}

input ComponentContentFaqInput {
  faq: ID
  id: ID
}

type ComponentContentHero {
  id: ID!
  responsiveImage(filters: ComponentElementsResponsiveImageFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentElementsResponsiveImage]
  subTitle: String
  title: String
  titleColor: ENUM_COMPONENTCONTENTHERO_TITLECOLOR
  titleHtml: String
}

input ComponentContentHeroFiltersInput {
  and: [ComponentContentHeroFiltersInput]
  not: ComponentContentHeroFiltersInput
  or: [ComponentContentHeroFiltersInput]
  responsiveImage: ComponentElementsResponsiveImageFiltersInput
  subTitle: StringFilterInput
  title: StringFilterInput
  titleColor: StringFilterInput
}

input ComponentContentHeroInput {
  id: ID
  responsiveImage: [ComponentElementsResponsiveImageInput]
  subTitle: String
  title: String
  titleColor: ENUM_COMPONENTCONTENTHERO_TITLECOLOR
}

type ComponentContentImageGrid {
  gap: ENUM_COMPONENTCONTENTIMAGEGRID_GAP
  id: ID!
  images(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
}

input ComponentContentImageGridFiltersInput {
  and: [ComponentContentImageGridFiltersInput]
  gap: StringFilterInput
  not: ComponentContentImageGridFiltersInput
  or: [ComponentContentImageGridFiltersInput]
}

input ComponentContentImageGridInput {
  gap: ENUM_COMPONENTCONTENTIMAGEGRID_GAP
  id: ID
  images: [ID]
}

type ComponentContentImageText {
  fixedHeight: Int
  headline: ComponentElementsHeadline
  html: String
  id: ID!
  image: UploadFileEntityResponse
  imageColumns: Int!
  imagePriority: Boolean
  mediaPosition: ENUM_COMPONENTCONTENTIMAGETEXT_MEDIAPOSITION!
  screenHeight: Boolean
  text: String
  textAlign: ENUM_COMPONENTCONTENTIMAGETEXT_TEXTALIGN!
  textColumns: Int!
}

input ComponentContentImageTextFiltersInput {
  and: [ComponentContentImageTextFiltersInput]
  fixedHeight: IntFilterInput
  headline: ComponentElementsHeadlineFiltersInput
  imageColumns: IntFilterInput
  imagePriority: BooleanFilterInput
  mediaPosition: StringFilterInput
  not: ComponentContentImageTextFiltersInput
  or: [ComponentContentImageTextFiltersInput]
  screenHeight: BooleanFilterInput
  text: StringFilterInput
  textAlign: StringFilterInput
  textColumns: IntFilterInput
}

input ComponentContentImageTextInput {
  fixedHeight: Int
  headline: ComponentElementsHeadlineInput
  id: ID
  image: ID
  imageColumns: Int
  imagePriority: Boolean
  mediaPosition: ENUM_COMPONENTCONTENTIMAGETEXT_MEDIAPOSITION
  screenHeight: Boolean
  text: String
  textAlign: ENUM_COMPONENTCONTENTIMAGETEXT_TEXTALIGN
  textColumns: Int
}

type ComponentContentPagePreviewList {
  hierarchy: HierarchyEntityResponse
  id: ID!
  limit: Int
  pages(filters: PageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageRelationResponseCollection
}

input ComponentContentPagePreviewListFiltersInput {
  and: [ComponentContentPagePreviewListFiltersInput]
  hierarchy: HierarchyFiltersInput
  limit: IntFilterInput
  not: ComponentContentPagePreviewListFiltersInput
  or: [ComponentContentPagePreviewListFiltersInput]
  pages: PageFiltersInput
}

input ComponentContentPagePreviewListInput {
  hierarchy: ID
  id: ID
  limit: Int
  pages: [ID]
}

type ComponentContentPricing {
  id: ID!
  plans(filters: ComponentElementsPricingPlanFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentElementsPricingPlan]
}

input ComponentContentPricingFiltersInput {
  and: [ComponentContentPricingFiltersInput]
  not: ComponentContentPricingFiltersInput
  or: [ComponentContentPricingFiltersInput]
  plans: ComponentElementsPricingPlanFiltersInput
}

input ComponentContentPricingInput {
  id: ID
  plans: [ComponentElementsPricingPlanInput]
}

type ComponentContentSectionHeadline {
  headline: ComponentElementsHeadline
  id: ID!
  useInTableOfContents: Boolean
}

input ComponentContentSectionHeadlineFiltersInput {
  and: [ComponentContentSectionHeadlineFiltersInput]
  headline: ComponentElementsHeadlineFiltersInput
  not: ComponentContentSectionHeadlineFiltersInput
  or: [ComponentContentSectionHeadlineFiltersInput]
  useInTableOfContents: BooleanFilterInput
}

input ComponentContentSectionHeadlineInput {
  headline: ComponentElementsHeadlineInput
  id: ID
  useInTableOfContents: Boolean
}

type ComponentContentSocialProofBar {
  avatars(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  html: String
  id: ID!
  text: String
}

input ComponentContentSocialProofBarFiltersInput {
  and: [ComponentContentSocialProofBarFiltersInput]
  not: ComponentContentSocialProofBarFiltersInput
  or: [ComponentContentSocialProofBarFiltersInput]
  text: StringFilterInput
}

input ComponentContentSocialProofBarInput {
  avatars: [ID]
  id: ID
  text: String
}

type ComponentContentVideo {
  consentBackgroundImage: UploadFileEntityResponse
  id: ID!
  youtubeId: String
}

input ComponentContentVideoFiltersInput {
  and: [ComponentContentVideoFiltersInput]
  not: ComponentContentVideoFiltersInput
  or: [ComponentContentVideoFiltersInput]
  youtubeId: StringFilterInput
}

input ComponentContentVideoInput {
  consentBackgroundImage: ID
  id: ID
  youtubeId: String
}

type ComponentElementsButton {
  externalUrl: String
  id: ID!
  label: String
  page: PageEntityResponse
  style: ENUM_COMPONENTELEMENTSBUTTON_STYLE
  target: ENUM_COMPONENTELEMENTSBUTTON_TARGET
  variant: ENUM_COMPONENTELEMENTSBUTTON_VARIANT
}

input ComponentElementsButtonFiltersInput {
  and: [ComponentElementsButtonFiltersInput]
  externalUrl: StringFilterInput
  label: StringFilterInput
  not: ComponentElementsButtonFiltersInput
  or: [ComponentElementsButtonFiltersInput]
  page: PageFiltersInput
  style: StringFilterInput
  target: StringFilterInput
  variant: StringFilterInput
}

input ComponentElementsButtonInput {
  externalUrl: String
  id: ID
  label: String
  page: ID
  style: ENUM_COMPONENTELEMENTSBUTTON_STYLE
  target: ENUM_COMPONENTELEMENTSBUTTON_TARGET
  variant: ENUM_COMPONENTELEMENTSBUTTON_VARIANT
}

type ComponentElementsHeadline {
  align: ENUM_COMPONENTELEMENTSHEADLINE_ALIGN!
  id: ID!
  text: String
  variant: ENUM_COMPONENTELEMENTSHEADLINE_VARIANT
}

input ComponentElementsHeadlineFiltersInput {
  align: StringFilterInput
  and: [ComponentElementsHeadlineFiltersInput]
  not: ComponentElementsHeadlineFiltersInput
  or: [ComponentElementsHeadlineFiltersInput]
  text: StringFilterInput
  variant: StringFilterInput
}

input ComponentElementsHeadlineInput {
  align: ENUM_COMPONENTELEMENTSHEADLINE_ALIGN
  id: ID
  text: String
  variant: ENUM_COMPONENTELEMENTSHEADLINE_VARIANT
}

type ComponentElementsPricingPlan {
  btnLabel: String
  features: String
  highlightedText: String
  href: String
  id: ID!
  name: String
  price: String
}

input ComponentElementsPricingPlanFiltersInput {
  and: [ComponentElementsPricingPlanFiltersInput]
  btnLabel: StringFilterInput
  features: StringFilterInput
  highlightedText: StringFilterInput
  href: StringFilterInput
  name: StringFilterInput
  not: ComponentElementsPricingPlanFiltersInput
  or: [ComponentElementsPricingPlanFiltersInput]
  price: StringFilterInput
}

input ComponentElementsPricingPlanInput {
  btnLabel: String
  features: String
  highlightedText: String
  href: String
  id: ID
  name: String
  price: String
}

type ComponentElementsQuestionAndAnswer {
  answer: JSON!
  id: ID!
  question: String!
}

input ComponentElementsQuestionAndAnswerFiltersInput {
  and: [ComponentElementsQuestionAndAnswerFiltersInput]
  answer: JSONFilterInput
  not: ComponentElementsQuestionAndAnswerFiltersInput
  or: [ComponentElementsQuestionAndAnswerFiltersInput]
  question: StringFilterInput
}

input ComponentElementsQuestionAndAnswerInput {
  answer: JSON
  id: ID
  question: String
}

type ComponentElementsResponsiveImage {
  id: ID!
  image: UploadFileEntityResponse!
  screenSize: ENUM_COMPONENTELEMENTSRESPONSIVEIMAGE_SCREENSIZE!
}

input ComponentElementsResponsiveImageFiltersInput {
  and: [ComponentElementsResponsiveImageFiltersInput]
  not: ComponentElementsResponsiveImageFiltersInput
  or: [ComponentElementsResponsiveImageFiltersInput]
  screenSize: StringFilterInput
}

input ComponentElementsResponsiveImageInput {
  id: ID
  image: ID
  screenSize: ENUM_COMPONENTELEMENTSRESPONSIVEIMAGE_SCREENSIZE
}

type ComponentElementsRichText {
  align: ENUM_COMPONENTELEMENTSRICHTEXT_ALIGN
  html: String
  id: ID!
  text: String
}

input ComponentElementsRichTextFiltersInput {
  align: StringFilterInput
  and: [ComponentElementsRichTextFiltersInput]
  not: ComponentElementsRichTextFiltersInput
  or: [ComponentElementsRichTextFiltersInput]
  text: StringFilterInput
}

input ComponentElementsRichTextInput {
  align: ENUM_COMPONENTELEMENTSRICHTEXT_ALIGN
  id: ID
  text: String
}

type ComponentElementsSpacer {
  id: ID!
  spaceBottom: ENUM_COMPONENTELEMENTSSPACER_SPACEBOTTOM
  spaceTop: ENUM_COMPONENTELEMENTSSPACER_SPACETOP
}

input ComponentElementsSpacerFiltersInput {
  and: [ComponentElementsSpacerFiltersInput]
  not: ComponentElementsSpacerFiltersInput
  or: [ComponentElementsSpacerFiltersInput]
  spaceBottom: StringFilterInput
  spaceTop: StringFilterInput
}

input ComponentElementsSpacerInput {
  id: ID
  spaceBottom: ENUM_COMPONENTELEMENTSSPACER_SPACEBOTTOM
  spaceTop: ENUM_COMPONENTELEMENTSSPACER_SPACETOP
}

type ComponentLayoutsSidebarLayout {
  id: ID!
  sidebar_layout: SidebarLayoutEntityResponse
}

input ComponentLayoutsSidebarLayoutFiltersInput {
  and: [ComponentLayoutsSidebarLayoutFiltersInput]
  not: ComponentLayoutsSidebarLayoutFiltersInput
  or: [ComponentLayoutsSidebarLayoutFiltersInput]
  sidebar_layout: SidebarLayoutFiltersInput
}

input ComponentLayoutsSidebarLayoutInput {
  id: ID
  sidebar_layout: ID
}

type ComponentNavigationDropdown {
  id: ID!
  links(filters: ComponentNavigationLinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentNavigationLink]
}

input ComponentNavigationDropdownFiltersInput {
  and: [ComponentNavigationDropdownFiltersInput]
  links: ComponentNavigationLinkFiltersInput
  not: ComponentNavigationDropdownFiltersInput
  or: [ComponentNavigationDropdownFiltersInput]
}

input ComponentNavigationDropdownInput {
  id: ID
  links: [ComponentNavigationLinkInput]
}

type ComponentNavigationLink {
  description: String
  id: ID!
  image: UploadFileEntityResponse
  label: String
  page: PageEntityResponse
  target: ENUM_COMPONENTNAVIGATIONLINK_TARGET
  url: String
}

input ComponentNavigationLinkFiltersInput {
  and: [ComponentNavigationLinkFiltersInput]
  description: StringFilterInput
  label: StringFilterInput
  not: ComponentNavigationLinkFiltersInput
  or: [ComponentNavigationLinkFiltersInput]
  page: PageFiltersInput
  target: StringFilterInput
  url: StringFilterInput
}

input ComponentNavigationLinkInput {
  description: String
  id: ID
  image: ID
  label: String
  page: ID
  target: ENUM_COMPONENTNAVIGATIONLINK_TARGET
  url: String
}

type ComponentNavigationLinkList {
  align: ENUM_COMPONENTNAVIGATIONLINKLIST_ALIGN
  headline: String
  id: ID!
  links(filters: ComponentNavigationLinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentNavigationLink]
  orientation: ENUM_COMPONENTNAVIGATIONLINKLIST_ORIENTATION
}

input ComponentNavigationLinkListFiltersInput {
  align: StringFilterInput
  and: [ComponentNavigationLinkListFiltersInput]
  headline: StringFilterInput
  links: ComponentNavigationLinkFiltersInput
  not: ComponentNavigationLinkListFiltersInput
  or: [ComponentNavigationLinkListFiltersInput]
  orientation: StringFilterInput
}

input ComponentNavigationLinkListInput {
  align: ENUM_COMPONENTNAVIGATIONLINKLIST_ALIGN
  headline: String
  id: ID
  links: [ComponentNavigationLinkInput]
  orientation: ENUM_COMPONENTNAVIGATIONLINKLIST_ORIENTATION
}

type ComponentNavigationTableOfContents {
  id: ID!
  name: String
}

input ComponentNavigationTableOfContentsFiltersInput {
  and: [ComponentNavigationTableOfContentsFiltersInput]
  name: StringFilterInput
  not: ComponentNavigationTableOfContentsFiltersInput
  or: [ComponentNavigationTableOfContentsFiltersInput]
}

input ComponentNavigationTableOfContentsInput {
  id: ID
  name: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nei: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  nei: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

enum ENUM_COMPONENTCONTENTBUTTONBAR_ALIGN {
  center
  left
  right
}

enum ENUM_COMPONENTCONTENTHERO_TITLECOLOR {
  black
  fuchsia
  white
}

enum ENUM_COMPONENTCONTENTIMAGEGRID_GAP {
  large
  medium
  none
  small
}

enum ENUM_COMPONENTCONTENTIMAGETEXT_MEDIAPOSITION {
  left
  right
}

enum ENUM_COMPONENTCONTENTIMAGETEXT_TEXTALIGN {
  left
  right
}

enum ENUM_COMPONENTELEMENTSBUTTON_STYLE {
  primary
  secondary
}

enum ENUM_COMPONENTELEMENTSBUTTON_TARGET {
  blank
  self
}

enum ENUM_COMPONENTELEMENTSBUTTON_VARIANT {
  filled
  outlined
  text
}

enum ENUM_COMPONENTELEMENTSHEADLINE_ALIGN {
  center
  left
  right
}

enum ENUM_COMPONENTELEMENTSHEADLINE_VARIANT {
  h1
  h2
  h3
  h4
  h5
}

enum ENUM_COMPONENTELEMENTSRESPONSIVEIMAGE_SCREENSIZE {
  desktop
  large_mobile
  medium_mobile
  small_mobile
  tablet
}

enum ENUM_COMPONENTELEMENTSRICHTEXT_ALIGN {
  center
  left
  right
}

enum ENUM_COMPONENTELEMENTSSPACER_SPACEBOTTOM {
  large
  medium
  small
}

enum ENUM_COMPONENTELEMENTSSPACER_SPACETOP {
  large
  medium
  small
}

enum ENUM_COMPONENTNAVIGATIONLINKLIST_ALIGN {
  center
  left
  right
}

enum ENUM_COMPONENTNAVIGATIONLINKLIST_ORIENTATION {
  horizontal
  vertical
}

enum ENUM_COMPONENTNAVIGATIONLINK_TARGET {
  blank
  self
}

enum ENUM_MENUITEM_TARGET {
  blank
  self
}

enum ENUM_PAGE_METAROBOTS {
  Do_not_show_in_search_engines
  Show_in_search_engines
}

type EnablePreviewResponse {
  success: Boolean
}

type Error {
  code: String!
  message: String
}

type Faq {
  createdAt: DateTime
  description: JSON
  name: String
  questions(filters: ComponentElementsQuestionAndAnswerFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentElementsQuestionAndAnswer]
  updatedAt: DateTime
}

type FaqEntity {
  attributes: Faq
  id: ID
}

type FaqEntityResponse {
  data: FaqEntity
}

type FaqEntityResponseCollection {
  data: [FaqEntity!]!
  meta: ResponseCollectionMeta!
}

input FaqFiltersInput {
  and: [FaqFiltersInput]
  createdAt: DateTimeFilterInput
  description: JSONFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: FaqFiltersInput
  or: [FaqFiltersInput]
  questions: ComponentElementsQuestionAndAnswerFiltersInput
  updatedAt: DateTimeFilterInput
}

input FaqInput {
  description: JSON
  name: String
  questions: [ComponentElementsQuestionAndAnswerInput]
}

type FaqRelationResponseCollection {
  data: [FaqEntity!]!
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nei: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

union GenericMorph = ComponentContentButtonBar | ComponentContentClientQuote | ComponentContentCode | ComponentContentFaq | ComponentContentHero | ComponentContentImageGrid | ComponentContentImageText | ComponentContentPagePreviewList | ComponentContentPricing | ComponentContentSectionHeadline | ComponentContentSocialProofBar | ComponentContentVideo | ComponentElementsButton | ComponentElementsHeadline | ComponentElementsPricingPlan | ComponentElementsQuestionAndAnswer | ComponentElementsResponsiveImage | ComponentElementsRichText | ComponentElementsSpacer | ComponentLayoutsSidebarLayout | ComponentNavigationDropdown | ComponentNavigationLink | ComponentNavigationLinkList | ComponentNavigationTableOfContents | Faq | Global | Hierarchy | I18NLocale | Menu | MenuItem | Page | SidebarLayout | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type Global {
  Logo: UploadFileEntityResponse
  createdAt: DateTime
  footer: [GlobalFooterDynamicZone]
  twitterHandle: String
  updatedAt: DateTime
}

type GlobalEntity {
  attributes: Global
  id: ID
}

type GlobalEntityResponse {
  data: GlobalEntity
}

type GlobalEntityResponseCollection {
  data: [GlobalEntity!]!
  meta: ResponseCollectionMeta!
}

input GlobalFiltersInput {
  and: [GlobalFiltersInput]
  createdAt: DateTimeFilterInput
  not: GlobalFiltersInput
  or: [GlobalFiltersInput]
  twitterHandle: StringFilterInput
  updatedAt: DateTimeFilterInput
}

union GlobalFooterDynamicZone = ComponentElementsRichText | ComponentNavigationLinkList | Error

scalar GlobalFooterDynamicZoneInput

input GlobalInput {
  Logo: ID
  footer: [GlobalFooterDynamicZoneInput!]
  twitterHandle: String
}

type GlobalRelationResponseCollection {
  data: [GlobalEntity!]!
}

type Hierarchy {
  createdAt: DateTime
  page: PageEntityResponse
  parent: HierarchyEntityResponse
  publishedAt: DateTime
  title: String!
  updatedAt: DateTime
}

type HierarchyEntity {
  attributes: Hierarchy
  childIds: [String]
  id: ID
  parents: [Breadcrumb]
}

type HierarchyEntityResponse {
  data: HierarchyEntity
}

type HierarchyEntityResponseCollection {
  data: [HierarchyEntity!]!
  meta: ResponseCollectionMeta!
}

input HierarchyFiltersInput {
  and: [HierarchyFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: HierarchyFiltersInput
  or: [HierarchyFiltersInput]
  page: PageFiltersInput
  parent: HierarchyFiltersInput
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input HierarchyInput {
  page: ID
  parent: ID
  publishedAt: DateTime
  title: String
}

type HierarchyRelationResponseCollection {
  data: [HierarchyEntity!]!
}

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  nei: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nei: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  nei: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  nei: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type Menu {
  createdAt: DateTime
  locale: String
  localizations(filters: MenuFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MenuRelationResponseCollection
  menu_items(filters: MenuItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MenuItemRelationResponseCollection
  name: String
  updatedAt: DateTime
}

type MenuEntity {
  attributes: Menu
  id: ID
}

type MenuEntityResponse {
  data: MenuEntity
}

type MenuEntityResponseCollection {
  data: [MenuEntity!]!
  meta: ResponseCollectionMeta!
}

input MenuFiltersInput {
  and: [MenuFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: MenuFiltersInput
  menu_items: MenuItemFiltersInput
  name: StringFilterInput
  not: MenuFiltersInput
  or: [MenuFiltersInput]
  updatedAt: DateTimeFilterInput
}

input MenuInput {
  menu_items: [ID]
  name: String
}

type MenuItem {
  components: [MenuItemComponentsDynamicZone]
  createdAt: DateTime
  label: String
  locale: String
  localizations(filters: MenuItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): MenuItemRelationResponseCollection
  name: String
  page: PageEntityResponse
  target: ENUM_MENUITEM_TARGET
  updatedAt: DateTime
  url: String
}

union MenuItemComponentsDynamicZone = ComponentContentPagePreviewList | ComponentNavigationLinkList | Error

scalar MenuItemComponentsDynamicZoneInput

type MenuItemEntity {
  attributes: MenuItem
  id: ID
}

type MenuItemEntityResponse {
  data: MenuItemEntity
}

type MenuItemEntityResponseCollection {
  data: [MenuItemEntity!]!
  meta: ResponseCollectionMeta!
}

input MenuItemFiltersInput {
  and: [MenuItemFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  label: StringFilterInput
  locale: StringFilterInput
  localizations: MenuItemFiltersInput
  name: StringFilterInput
  not: MenuItemFiltersInput
  or: [MenuItemFiltersInput]
  page: PageFiltersInput
  target: StringFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
}

input MenuItemInput {
  components: [MenuItemComponentsDynamicZoneInput!]
  label: String
  name: String
  page: ID
  target: ENUM_MENUITEM_TARGET
  url: String
}

type MenuItemRelationResponseCollection {
  data: [MenuItemEntity!]!
}

type MenuRelationResponseCollection {
  data: [MenuEntity!]!
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createFaq(data: FaqInput!): FaqEntityResponse
  createHierarchy(data: HierarchyInput!): HierarchyEntityResponse
  createMenu(data: MenuInput!, locale: I18NLocaleCode): MenuEntityResponse
  createMenuItem(data: MenuItemInput!, locale: I18NLocaleCode): MenuItemEntityResponse
  createMenuItemLocalization(data: MenuItemInput, id: ID, locale: I18NLocaleCode): MenuItemEntityResponse
  createMenuLocalization(data: MenuInput, id: ID, locale: I18NLocaleCode): MenuEntityResponse
  createPage(data: PageInput!, locale: I18NLocaleCode): PageEntityResponse
  createPageLocalization(data: PageInput, id: ID, locale: I18NLocaleCode): PageEntityResponse
  createSidebarLayout(data: SidebarLayoutInput!, locale: I18NLocaleCode): SidebarLayoutEntityResponse
  createSidebarLayoutLocalization(data: SidebarLayoutInput, id: ID, locale: I18NLocaleCode): SidebarLayoutEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteFaq(id: ID!): FaqEntityResponse
  deleteGlobal: GlobalEntityResponse
  deleteHierarchy(id: ID!): HierarchyEntityResponse
  deleteMenu(id: ID!, locale: I18NLocaleCode): MenuEntityResponse
  deleteMenuItem(id: ID!, locale: I18NLocaleCode): MenuItemEntityResponse
  deletePage(id: ID!, locale: I18NLocaleCode): PageEntityResponse
  deleteSidebarLayout(id: ID!, locale: I18NLocaleCode): SidebarLayoutEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  enablePreview(locale: I18NLocaleCode, path: String): EnablePreviewResponse

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateFaq(data: FaqInput!, id: ID!): FaqEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateGlobal(data: GlobalInput!): GlobalEntityResponse
  updateHierarchy(data: HierarchyInput!, id: ID!): HierarchyEntityResponse
  updateMenu(data: MenuInput!, id: ID!, locale: I18NLocaleCode): MenuEntityResponse
  updateMenuItem(data: MenuItemInput!, id: ID!, locale: I18NLocaleCode): MenuItemEntityResponse
  updatePage(data: PageInput!, id: ID!, locale: I18NLocaleCode): PageEntityResponse
  updateSidebarLayout(data: SidebarLayoutInput!, id: ID!, locale: I18NLocaleCode): SidebarLayoutEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Page {
  components: [PageComponentsDynamicZone]
  createdAt: DateTime
  hierarchy: HierarchyEntityResponse
  locale: String
  localizations(filters: PageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageRelationResponseCollection
  metaDescription: String
  metaKeywords: String
  metaRobots: ENUM_PAGE_METAROBOTS
  metaTitle: String
  path: String!
  previewImage: UploadFileEntityResponse
  publicationDate: DateTime
  publishedAt: DateTime
  structuredData: JSON
  synopsis: String
  title: String
  updatedAt: DateTime
}

union PageComponentsDynamicZone = ComponentContentButtonBar | ComponentContentClientQuote | ComponentContentFaq | ComponentContentHero | ComponentContentImageGrid | ComponentContentImageText | ComponentContentPagePreviewList | ComponentContentPricing | ComponentContentSectionHeadline | ComponentContentSocialProofBar | ComponentContentVideo | ComponentElementsRichText | ComponentElementsSpacer | ComponentLayoutsSidebarLayout | ComponentNavigationLinkList | Error

scalar PageComponentsDynamicZoneInput

type PageEntity {
  attributes: Page
  id: ID
}

type PageEntityResponse {
  data: PageEntity
}

type PageEntityResponseCollection {
  data: [PageEntity!]!
  meta: ResponseCollectionMeta!
}

input PageFiltersInput {
  and: [PageFiltersInput]
  createdAt: DateTimeFilterInput
  hierarchy: HierarchyFiltersInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: PageFiltersInput
  metaDescription: StringFilterInput
  metaKeywords: StringFilterInput
  metaRobots: StringFilterInput
  metaTitle: StringFilterInput
  not: PageFiltersInput
  or: [PageFiltersInput]
  path: StringFilterInput
  publicationDate: DateTimeFilterInput
  publishedAt: DateTimeFilterInput
  structuredData: JSONFilterInput
  synopsis: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input PageInput {
  components: [PageComponentsDynamicZoneInput!]
  hierarchy: ID
  metaDescription: String
  metaKeywords: String
  metaRobots: ENUM_PAGE_METAROBOTS
  metaTitle: String
  path: String
  previewImage: ID
  publicationDate: DateTime
  publishedAt: DateTime
  structuredData: JSON
  synopsis: String
  title: String
}

type PageRelationResponseCollection {
  data: [PageEntity!]!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  faq(id: ID): FaqEntityResponse
  faqs(filters: FaqFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): FaqEntityResponseCollection
  global: GlobalEntityResponse
  hierarchies(filters: HierarchyFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): HierarchyEntityResponseCollection
  hierarchy(id: ID): HierarchyEntityResponse
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  menu(id: ID, locale: I18NLocaleCode): MenuEntityResponse
  menuItem(id: ID, locale: I18NLocaleCode): MenuItemEntityResponse
  menuItems(filters: MenuItemFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, sort: [String] = []): MenuItemEntityResponseCollection
  menus(filters: MenuFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, sort: [String] = []): MenuEntityResponseCollection
  page(id: ID, locale: I18NLocaleCode): PageEntityResponse
  pages(filters: PageFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageEntityResponseCollection
  sidebarLayout(id: ID, locale: I18NLocaleCode): SidebarLayoutEntityResponse
  sidebarLayouts(filters: SidebarLayoutFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, sort: [String] = []): SidebarLayoutEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type SidebarLayout {
  contentComponents: [SidebarLayoutContentComponentsDynamicZone]
  createdAt: DateTime
  locale: String
  localizations(filters: SidebarLayoutFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): SidebarLayoutRelationResponseCollection
  name: String
  sidebarComponents: [SidebarLayoutSidebarComponentsDynamicZone]
  stickySidebar: Boolean
  updatedAt: DateTime
}

union SidebarLayoutContentComponentsDynamicZone = ComponentContentCode | ComponentContentImageGrid | ComponentContentSectionHeadline | ComponentContentVideo | ComponentElementsRichText | Error

scalar SidebarLayoutContentComponentsDynamicZoneInput

type SidebarLayoutEntity {
  attributes: SidebarLayout
  id: ID
}

type SidebarLayoutEntityResponse {
  data: SidebarLayoutEntity
}

type SidebarLayoutEntityResponseCollection {
  data: [SidebarLayoutEntity!]!
  meta: ResponseCollectionMeta!
}

input SidebarLayoutFiltersInput {
  and: [SidebarLayoutFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: SidebarLayoutFiltersInput
  name: StringFilterInput
  not: SidebarLayoutFiltersInput
  or: [SidebarLayoutFiltersInput]
  stickySidebar: BooleanFilterInput
  updatedAt: DateTimeFilterInput
}

input SidebarLayoutInput {
  contentComponents: [SidebarLayoutContentComponentsDynamicZoneInput!]
  name: String
  sidebarComponents: [SidebarLayoutSidebarComponentsDynamicZoneInput!]
  stickySidebar: Boolean
}

type SidebarLayoutRelationResponseCollection {
  data: [SidebarLayoutEntity!]!
}

union SidebarLayoutSidebarComponentsDynamicZone = ComponentNavigationLinkList | ComponentNavigationTableOfContents | Error

scalar SidebarLayoutSidebarComponentsDynamicZoneInput

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  nei: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  nei: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
